name: Build and Release bbctl

on:
  push:
    tags:
      - 'v*'
  pull_request:

permissions:
  contents: write

jobs:
  build:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    name: Build, Package & Publish
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod

      - name: Build binary
        run: |
          BIN_NAME=bbctl-${GITHUB_REF_NAME}-${{ matrix.goos }}-${{ matrix.goarch }}
          [[ "${{ matrix.goos }}" == "windows" ]] && BIN_NAME=${BIN_NAME}.exe
          echo "BIN_NAME=$BIN_NAME" >> "$GITHUB_ENV"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build \
            -ldflags="-s -w -X 'github.com/vinisman/bbctl/cmd.Version=${GITHUB_REF_NAME}' -X 'github.com/vinisman/bbctl/cmd.Commit=${GITHUB_SHA}'" \
            -o $BIN_NAME

      - name: Package artifact
        run: |
          mkdir -p release
          tar -czf release/${BIN_NAME}.tar.gz "$BIN_NAME"

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if release already exists
          if gh release view "${GITHUB_REF_NAME}" >/dev/null 2>&1; then
            echo "Release ${GITHUB_REF_NAME} already exists"
            exit 0
          fi

          # Get previous tag
          PREV_TAG=$(git tag --sort=-creatordate | sed -n '2p' 2>/dev/null || echo "")
          
          # Generate release notes
          if [ -z "$PREV_TAG" ]; then
            NOTES="## First release\n\n$(git log --oneline --format='- %s')"
          else
            NOTES="## Changes since $PREV_TAG\n\n$(git log --oneline --format='- %s' $PREV_TAG..HEAD)"
          fi
          
          echo -e "$NOTES" > release_notes.md
          
          # Create release with all artifacts
          gh release create "${GITHUB_REF_NAME}" release/*.tar.gz \
            --title "${GITHUB_REF_NAME}" \
            --notes-file release_notes.md

  build-check:
    name: Build Check on PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod

      - name: Build binary
        run: |
          BIN_NAME=bbctl-pr-${{ github.sha }}-${{ matrix.goos }}-${{ matrix.goarch }}
          [[ "${{ matrix.goos }}" == "windows" ]] && BIN_NAME=${BIN_NAME}.exe
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build \
            -ldflags="-s -w -X 'github.com/vinisman/bbctl/cmd.Version=pr-${{ github.sha }}' -X 'github.com/vinisman/bbctl/cmd.Commit=${GITHUB_SHA}'" \
            -o $BIN_NAME